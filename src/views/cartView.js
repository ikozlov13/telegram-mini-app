const { Scenes, Markup } = require('telegraf');
const CartController = require('../controllers/cartController');

const cartScene = new Scenes.BaseScene('cart');

cartScene.enter(async (ctx) => {
    const cart = CartController.getCart(ctx.from.id);

    if (cart.length === 0) {
        await ctx.reply('üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        return ctx.scene.leave();
    }

    for (const item of cart) {
        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('‚ûñ', `decrease_${item.product.id}`),
                Markup.button.callback('‚ûï', `increase_${item.product.id}`),
                Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', `remove_${item.product.id}`)
            ]
        ]);

        await ctx.replyWithPhoto(
            { source: item.product.images[Object.keys(item.product.images)[0]][0] },
            {
                caption: `${item.product.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n–¶–µ–Ω–∞: ${item.product.price * item.quantity} —Ä—É–±.`,
                ...keyboard
            }
        );
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑".', Markup.keyboard([
        ['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–ù–∞–∑–∞–¥']
    ]).resize());
});

cartScene.hears('–ù–∞–∑–∞–¥', (ctx) => {
    ctx.scene.enter('main-menu');
});

cartScene.hears('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', (ctx) => {
    ctx.scene.enter('order');
});

cartScene.action(/decrease_(.+)/, async (ctx) => {
    const productId = ctx.match[1];
    CartController.decreaseQuantity(ctx.from.id, productId);
    await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ.');
    ctx.scene.reenter();
});

cartScene.action(/increase_(.+)/, async (ctx) => {
    const productId = ctx.match[1];
    CartController.increaseQuantity(ctx.from.id, productId);
    await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ.');
    ctx.scene.reenter();
});

cartScene.action(/remove_(.+)/, async (ctx) => {
    const productId = ctx.match[1];
    CartController.removeFromCart(ctx.from.id, productId);
    await ctx.reply('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.');
    ctx.scene.reenter();
});

module.exports = { cartScene };