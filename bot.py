from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
import json
from datetime import datetime
import os
from dotenv import load_dotenv
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞/–≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä bot

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command('start'))
async def start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app = WebAppInfo(url="https://telegram-mini-app-zog6.onrender.com")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    keyboard = [[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=web_app)]]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã!", reply_markup=markup)

@dp.message(lambda msg: msg.web_app_data is not None)
async def handle_webapp_data(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = json.loads(message.web_app_data.data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        order_text = "üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        order_text += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
        order_text += f"üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(data['timestamp']).strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        order_text += "üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        for item in data['items']:
            order_text += f"- {item['name']} x{item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±.\n"
        
        order_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {data['total']} —Ä—É–±."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_CHAT_ID, order_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        customer_text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        customer_text += "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        await message.answer(customer_text)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_webhook():
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url:
        logging.warning(f"Webhook –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {webhook_info.url}")
        logging.warning("–£–¥–∞–ª—è–µ–º webhook...")
        await bot.delete_webhook()
    else:
        logging.info("Webhook –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

async def main():
    logging.info("Starting bot cleanup...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    try:
        await bot.session.close()
    except:
        pass
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    bot._session = None
    
    logging.info("Checking webhook...")
    await check_webhook()
    
    logging.info("Deleting webhook...")
    await bot.delete_webhook(drop_pending_updates=True)
    
    logging.info("Clearing updates...")
    try:
        await bot.get_updates(offset=-1, timeout=1)
    except:
        pass
    
    logging.info("Starting polling...")
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            skip_updates=True,
            timeout=30
        )
    finally:
        logging.info("Closing bot session...")
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!") 